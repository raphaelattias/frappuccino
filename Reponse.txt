REPONSES - PROJET DE PROGRAMMATION
ATTIAS RAPHAEL & EPPLE PASCAL
EPFL MABA2 - 2018

Ce fichier regroupe toutes nos réponses aux questions posées
semaine après semaine.


SEMAINE 1

[P1.1]

Notre conception de notre classe Vecteur est simple: un vecteur
de double et une dimension. La dimension nous semble être un attribut
qui pourrait devenir utile pour la suite du programme.

Concernant les droits d'accès, nous essayons d'encapsuler au 
maximum notre classe Vecteur. Les attributs de notre classe sont privés, mais l'utilisateur a la possibilité de les modifier ou d'y accéder à travers différentes méthodes publiques, comme les "get" ou les "set".

Au niveau des méthodes, nous n'en voyons, à ce stade, pas plus qui
pourraient nous être utiles pour la suite du projet. La seule touche
personnelle que nous avons apportée est la méthode "equilibrage" qui, 
comme le nom l'indique, remet deux vecteurs de tailles différentes à la même taille (celle du plus grand). Cette méthode nous est surtout utile pour les opérations.

[P1.2]

Nous avons choisi le choix du plongement naturel de R^m dams R^n
(pour m<n). Selon nous, il s'agit de la meilleiure solution. Cette 
méthode nous permet d'éviter qu'une opération entre deux vecteurs de tailles différentes implique une perte d'information.


SEMAINE 4

[P.4.1]

Oui, nous avons décidé d'utiliser un constructeur par copie pour notre classe vecteur. En effet un constructeur de copie permet de faciliter les tests effectués autour de la classe Vecteur. Elle autorise aussi une approche plus intuitive et moins lourde à la classe Vecteur.

[P.4.2]

a. b. OK JE SAIS PAS TROP MAIS JE PENSE QUE ÇA CHANGE RIEN AU NIVEAU DES ATTRIBUTS ET QUE LA DIFFICULTE MAJEURE EST FAIRE MODULO 2PI POUR LES ANGLES, OU ECRIRE UN CONSTRUCTEUR D'INTIALISATION QUI SAURAIT FAIRE LA DIFFERENCE ENTRE DES ANGLES ET DES DISTANCES.

[P.4.3]

Nous avons introduit les opérateurs "cout <<", "!=" et "==" afin d'assurer une continuité entre les opérateurs les plus répandus en C++ dans la manipulation d'int ou de double. L'objectif étant de rendre l'utilisation de Vecteur intuitive.


SEMAINE 6

[P.6.1] 

JE PENSE QU'IL FAUDRA PARLER DE POLYMORPHISME ET D'HERITAGE DONC JE PREFERE QU'ON LE FASSE ENSEMBLE BSX

[P.6.2]

La classe IntegrateurEulerCromer hérite de la super classe Integrateur. En effet au calcul d'intégration près, IntegrateurEulerCromer a besoin du même constructeur de copie et de l'attribut pas de temps.

SEMAINE 7

[P.7.1]

Les classes pendules et ressorts SONT des oscillateurs. Ce sont donc des sous-classes de la classe Oscillateur, dont elles héritent les méthodes et les attributs.
En effet, un ressort et un pendule sont avant tout des oscillateurs, et ont des attributs communs.
Ce qui les différencie sont les définitions des méthodes (evolue() par exemple) ou encore les attributs, comme par exemple la raideur du ressort, qui n'a aucun sens pour un pendule.
SEMAINE 8

[P.8.1]

La nature de la méthode dessine est virtuelle pure. Elle est "virtuelle" car les sous-classes (pour lesquelles cela a du sens) ont toutes une méthode dessine() propre à redéfinir, et "pure" parce que la classe dessinable n'est pas un objet que l'on désire dessiner.

[P.8.2]

La bonne manière est de faire de notre classe Système une collection hétérogène d'Oscillateurs.

